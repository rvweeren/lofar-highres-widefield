##########################################################
## Please update these parameters. 			##
##########################################################

# software paths
! long_baseline_pipeline_dir            = /project/sksp/Software/long_baseline_pipeline
! widefield_dir = /project/sksp/Software/lofar-highres-widefield
! ddf_pipeline_dir = /project/sksp/Software/ddf-pipeline
! prefactor_dir                         = /project/sksp/Software/prefactor
! losoto_directory                     = /opt/lofar/losoto
! aoflagger				= /opt/lofar/aoflagger/bin/aoflagger ## path to your aoflagger executable
! wsclean_executable    = /opt/lofar/wsclean/bin/wsclean
! ddf_executable        = /opt/lofar/DDFacet/bin/DDF.py
! lofar_directory 			= $LOFARROOT

# ## target data information
! target_input_path             = PREFACTOR_SCRATCH_DIR/Input
#! target_input_path             = /project/sksp/Software/lofar-highres-widefield/testdir
! target_input_pattern          = sub6asec*.ms

## Stations to flag
! flag_baselines                = [ ] ## for HBA data before October 2015, should set to: [ CS013HBA* ]

##########################################################
## These parameters may need to be updated.		##
##########################################################

## Output directories
! job_directory                 = input.output.job_directory ## directory of the prefactor outputs
! results_directory             = {{ job_directory }}/results
! inspection_directory          = {{ results_directory }}/inspection/
! cal_values_directory          = {{ results_directory }}/results/cal_values

## Runtime setup -- will depend on your computing cluster
! num_proc_per_node             = input.output.max_per_node    ## number of processes to use per step per node
! num_proc_per_node_limit       = 4     ## number of processes to use per step per node for tasks with high i/o (dppp or cp) or memory (eg calibration)
! max_dppp_threads              = 9     ## number of threads per process for NDPPP
! max_wsclean_threads           = 32
! error_tolerance               = False ## False = stop if any subband fails, True = keep going

##########################################################
## Changing these will probably break something.	##
##########################################################

## global information
! working_directory         = input.output.working_directory/input.output.job_name
! scripts			 	= {{ long_baseline_pipeline_dir }}/bin
! prefactor_scripts			= {{ prefactor_dir }}/scripts

! ddf_dir = /project/sksp/Data/L659948_4ch_4s/lotss_products
! datadi_col = DATA
! delaycal_phase = /project/sksp/Data/L659948_4ch_4s/infield_calibrator/phaseonlySL333880_1ch_16s.mssolsgrid_8.h5
! delaycal_amp = /project/sksp/Data/L659948_4ch_4s/infield_calibrator/SL333880_1ch_16s.mssolsgrid_8.h5

! rfistrategy			= HBAdefault
! max_length = 60 ## amount of subbands to concatenate for full-bandwidth flagging (for calibrator you can take all SBs, for target stick to about 148)

##
## END CONFIGURATION


##########################################################
## Steps to run.					##
##########################################################

! substep_clip = clipATeam, ## leave blank for no a-team clipping
! substep_flag = # aoflagging,  ## turned off by default
! substep_cleanup = ,cleanup

pipeline.steps = [ setup, image_1asec]

pipeline.steps.setup = [ mk_results_dir, mk_inspect_dir, mk_cal_values_dir, createmap_target, createmap_preptarg, createmap_target_list]
pipeline.steps.image_1asec = [ average_data, taper_image, transfer_taper, make_image, make_mask, make_image2, createmap_image_i, make_source_list]
pipeline.steps.finalize = [ make_results_mapfile_images, move_results_images, make_results_mapfile_catalog, move_results_catalog]


###########################################################################


##################################################################################################################
##														##
##			BEGIN PIPELINE: DO NOT UPDATE BELOW THIS LINE!						##
##														##
##################################################################################################################

## create directories

# create the results directory if needed
mk_results_dir.control.kind               = plugin
mk_results_dir.control.type               = makeDirectory
mk_results_dir.control.directory          = {{ results_directory }}

# create the inspection_directory if needed
mk_inspect_dir.control.kind               = plugin
mk_inspect_dir.control.type               = makeDirectory
mk_inspect_dir.control.directory          = {{ inspection_directory }}

# create the cal_values_directory if needed
mk_cal_values_dir.control.kind               =  plugin
mk_cal_values_dir.control.type               =  makeDirectory
mk_cal_values_dir.control.directory          =  {{ cal_values_directory }}

# create a directory for the ionex files
mk_ionex_dir.control.kind		  = plugin
mk_ionex_dir.control.type		  = makeDirectory
mk_ionex_dir.control.directory		  = {{ ionex_path }}

# generate a mapfile of all the target data
createmap_target.control.kind             = plugin
createmap_target.control.type             = createMapfile
createmap_target.control.method           = mapfile_from_folder
createmap_target.control.mapfile_dir      = input.output.mapfile_dir
createmap_target.control.filename         = createmap_target.mapfile
createmap_target.control.folder           = {{ target_input_path }}
createmap_target.control.pattern          = {{ target_input_pattern }}

createmap_preptarg.control.kind                                =   plugin
createmap_preptarg.control.type                                =   makeResultsMapfile
createmap_preptarg.control.mapfile_dir                         =   input.output.mapfile_dir
createmap_preptarg.control.filename                            =   createmap_preptarg.mapfile
createmap_preptarg.control.mapfile_in                          =   createmap_target.output.mapfile
createmap_preptarg.control.target_dir                          =   {{ working_directory }}
createmap_preptarg.control.make_target_dir                     =   False
createmap_preptarg.control.new_suffix                          =   .ms

# convert to a mapfile with all subbands in one list
createmap_target_list.control.kind            =   plugin
createmap_target_list.control.type            =   createMapfile
createmap_target_list.control.method          =   mapfile_all_to_one
createmap_target_list.control.mapfile_dir     =   input.output.mapfile_dir
createmap_target_list.control.filename        =   combine_data_tar_map.mapfile
createmap_target_list.control.mapfile_in      =   createmap_target.output.mapfile

cp_data.control.kind            = recipe
cp_data.control.type            = executable_args
cp_data.control.executable      = /bin/cp
cp_data.control.max_per_node    = 1
cp_data.control.mapfiles_in     = [createmap_target.output.mapfile, createmap_preptarg.output.mapfile]
cp_data.control.inputkeys       = [infile,outfile]
cp_data.argument.flags          = [-r,infile,outfile]

#
# Make the 1'' image.
#
# Average the data to 4ch/4s per subband.
average_data.control.type                   = dppp
average_data.control.max_per_node           = 1
average_data.control.error_tolerance        = {{ error_tolerance }}
average_data.control.mapfiles_in            = [createmap_target.output.mapfile]
average_data.control.inputkeys              = [msfile]
average_data.argument.numthreads            = {{ max_dppp_threads }}
average_data.argument.msin                  = msfile
average_data.argument.msin.datacolumn       = DATA
average_data.argument.msout.overwrite       = True
average_data.argument.msout.storagemanager  = dysco
average_data.argument.steps                 = [avg]
average_data.argument.avg.type              = average
average_data.argument.avg.timeresolution    = 4
average_data.argument.avg.freqresolution    = 48.82kHz

# Run wsclean for a 1 '' image.
taper_image.control.kind                     = recipe
taper_image.control.type                     = executable_args
taper_image.control.inplace                  = True
taper_image.control.executable               = {{ wsclean_executable }}
taper_image.control.args_format              = wsclean
taper_image.control.max_per_node             = 1
taper_image.control.error_tolerance          = {{ error_tolerance }}
taper_image.control.mapfiles_in              = [average_data.output.mapfile]
taper_image.control.inputkeys                = [msfiles]
taper_image.argument.flags                   = [-make-psf, -fit-beam, -no-reorder, -no-update-model-required, -store-imaging-weights, msfiles]
taper_image.argument.j                       = {{ max_wsclean_threads }}
taper_image.argument.niter                   = 0
taper_image.argument.channels-out            = 6
taper_image.argument.weight                  = briggs -1.5
taper_image.argument.size                    = 1024 1024 
taper_image.argument.scale                   = 0.05asec
taper_image.argument.minuv-l                 = 80
taper_image.argument.taper-gaussian          = 1.2asec
taper_image.argument.name                    = wsclean_taper_1p2asec

# Transfer the taper such that DDFacet can use them.
transfer_taper.control.type         = pythonplugin
transfer_taper.control.max_per_node = {{ num_proc_per_node }}
transfer_taper.control.executable   = {{ widefield_dir }}/utils/transfer_imaging_weight.py
transfer_taper.argument.mapfiles_in  = [average_data.output.mapfile]
transfer_taper.argument.inputkey    = msin
transfer_taper.argument.flags       = [--msin,msin]

# Now make the image with DDFacet.
# DDF.py --Output-Name=image_dirin_SSD_init_natural --Data-MS={:s} --Deconv-PeakFactor 0.050000 --Data-ColName {ic:s} --Data-ChunkHours 4 --Parallel-NCPU=32 --Beam-CenterNorm=1 --Deconv-CycleFactor=0 --Deconv-MaxMinorIter=10000 --Deconv-MaxMajorIter=1 --Deconv-Mode SSD --Beam-Model=LOFAR --Beam-LOFARBeamMode=A --Weight-Mode Natural  --Image-NPix=25000 --CF-wmax 50000 --CF-Nw 100 --Output-Also onNeds --Image-Cell {cell:f} --Facets-NFacets=7 --SSDClean-NEnlargeData 0 --Freq-NDegridBand 1 --Beam-NBand 1 --Facets-DiamMax 1.5 --Facets-DiamMin 0.1 --Deconv-RMSFactor=3.000000 --SSDClean-ConvFFTSwitch 10000 --Data-Sort 1 --Cache-Dir=. --Log-Memory 1 --GAClean-RMSFactorInitHMP 1.000000 --GAClean-MaxMinorIterInitHMP 10000.000000 --DDESolutions-SolsDir=SOLSDIR --Cache-Weight=reset --Output-Mode=Clean --Output-RestoringBeam {beam:s} --Weight-ColName="IMAGING_WEIGHT" --Freq-NBand=2 --RIME-DecorrMode=FT --SSDClean-SSDSolvePars [S,Alpha] --SSDClean-BICFactor 0 --Mask-Auto=1 --Mask-SigTh=10.00 --Selection-UVRangeKm=[5.0,2000.000000] --GAClean-MinSizeInit=10'.format(CONFIG['data']['mslist'], ic=CONFIG['image']['data_column'], cell=float(CONFIG['image']['cellsize_full']), beam=DDF_RESTORING_BEAM)
make_image.control.type             = pythonplugin
make_image.control.executable       = {{ ddf_executable }}
make_image.argument.Output-Name     = image_dirin_SSD_natural
make_image.argument.Beam-CenterNorm     = 1
make_image.argument.Beam-Model          = LOFAR
make_image.argument.Beam-NBand          = 1
make_image.argument.Beam-LOFARBeamMode  = A
make_image.argument.Cache-Dir           = .
make_image.argument.Cache-Weight        = reset
make_image.argument.CF-wmax             = 50000
make_image.argument.CF-Nw               = 100
make_image.argument.Data-MS             = *.ms
make_image.argument.Data-ColName        = CORRECTED_DATA
make_image.argument.Data-ChunkHours     = 4
make_image.argument.Data-Sort           = 1
make_image.argument.Deconv-PeakFactor   = 0.05
make_image.argument.Deconv-CycleFactor  = 0
make_image.argument.Deconv-MaxMinorIter = 10000
make_image.argument.Deconv-MaxMajorIter = 1
make_image.argument.Deconv-Mode         = SSD
make_image.argument.Deconv-RMSFactor    = 3.0
make_image.argument.DDESolutions-SolsDir    = {{ ddf_dir }}/SOLSDIR
make_image.argument.Facets-NFacets      = 7
make_image.argument.Freq-NDegridBand    = 1
make_image.argument.Freq-NBand          = 2
make_image.argument.Facets-DiamMax      = 1.5
make_image.argument.Facets-DiamMin      = 0.1
make_image.argument.Image-Cell          = 0.44
make_image.argument.Image-NPix          = 20000
make_image.argument.GAClean-RMSFactorInitHMP    = 1
make_image.argument.GAClean-MaxMinorIterInitHMP = 10000.000000
make_image.argument.GAClean-MinSizeInit = 10
make_image.argument.Log-Memory          = 1
make_image.argument.Mask-Auto           = 1
make_image.argument.Mask-SigTh          = 10.00
make_image.argument.Output-Mode         = Clean
make_image.argument.Output-RestoringBeam    = 1.5
make_image.argument.Output-Also         = onNeds
make_image.argument.Parallel-NCPU       = {{ max_wsclean_threads }}
make_image.argument.RIME-DecorrMode     = FT
make_image.argument.SSDClean-BICFactor  = 0
make_image.argument.SSDClean-ConvFFTSwitch  = 10000
make_image.argument.SSDClean-NEnlargeData   = 0
make_image.argument.SSDClean-SSDSolvePars   = [S,Alpha]
make_image.argument.Selection-UVRangeKm = [160.0,2000.0]
make_image.argument.Weight-ColName      = IMAGING_WEIGHT
make_image.argument.Weight-Mode         = Natural

make_mask.control.kind          = recipe
make_mask.control.type          = executable_args
make_mask.control.executable    = /opt/lofar/DDFacet/bin/MakeMask.py
make_mask.argument.RestoredIm   = image_dirin_SSD_natural.app.restored.fits
make_mask.argument.Th           = 7.5
make_mask.argument.Box          = 50,2

make_image2.control.type             = pythonplugin
make_image2.control.executable       = {{ ddf_executable }}
make_image2.argument.Output-Name     = image_dirin_SSD_natural_m
make_image2.argument.Beam-CenterNorm     = 1
make_image2.argument.Beam-Model          = LOFAR
make_image2.argument.Beam-NBand          = 1
make_image2.argument.Beam-LOFARBeamMode  = A
make_image2.argument.Cache-Dir           = .
make_image2.argument.Cache-Dirty         = forceresidual
make_image2.argument.Cache-Weight        = reset
make_image2.argument.CF-wmax             = 50000
make_image2.argument.CF-Nw               = 100
make_image2.argument.Data-MS             = *.ms
make_image2.argument.Data-ColName        = CORRECTED_DATA
make_image2.argument.Data-ChunkHours     = 4
make_image2.argument.Data-Sort           = 1
make_image2.argument.Deconv-PeakFactor   = 0.05
make_image2.argument.Deconv-CycleFactor  = 0
make_image2.argument.Deconv-MaxMinorIter = 10000
make_image2.argument.Deconv-MaxMajorIter = 3
make_image2.argument.Deconv-Mode         = SSD
make_image2.argument.Deconv-RMSFactor    = 3.0
make_image2.argument.DDESolutions-SolsDir    = {{ ddf_dir }}/SOLSDIR
make_image2.argument.Facets-NFacets      = 7
make_image2.argument.Freq-NDegridBand    = 1
make_image2.argument.Freq-NBand          = 2
make_image2.argument.Facets-DiamMax      = 1.5
make_image2.argument.Facets-DiamMin      = 0.1
make_image2.argument.Image-Cell          = 0.44
make_image2.argument.Image-NPix          = 20000
make_image2.argument.GAClean-RMSFactorInitHMP    = 1
make_image2.argument.GAClean-MaxMinorIterInitHMP = 10000.000000
make_image2.argument.GAClean-MinSizeInit = 10
make_image2.argument.Log-Memory          = 1
make_image2.argument.Mask-Auto           = 1
make_image2.argument.Mask-External       = image_diring.app.restored.fits.mask.fits
make_image2.argument.Mask-SigTh          = 10.00
make_image2.argument.Output-Mode         = Clean
make_image2.argument.Output-RestoringBeam    = 1.5
make_image2.argument.Output-Also         = onNeds
make_image2.argument.Parallel-NCPU       = {{ max_wsclean_threads }}
make_image2.argument.Predict-InitDicoModel  = image_dirin_SSD.DicoModel 
make_image2.argument.RIME-DecorrMode     = FT
make_image2.argument.SSDClean-BICFactor  = 0
make_image2.argument.SSDClean-ConvFFTSwitch  = 10000
make_image2.argument.SSDClean-NEnlargeData   = 0
make_image2.argument.SSDClean-SSDSolvePars   = [S,Alpha]
make_image2.argument.Selection-UVRangeKm = [160.0,2000.0]
make_image2.argument.Weight-ColName      = IMAGING_WEIGHT
make_image2.argument.Weight-Mode         = Natural

# Find the image. Adapted from prefactor.
createmap_image_i.control.kind              =   plugin
createmap_image_i.control.type              =   addListMapfile
createmap_image_i.control.hosts             =   [localhost]
createmap_image_i.control.files             =   [image_dirin_SSD_m.int.restored.fits]
createmap_image_i.control.mapfile_dir       =   input.output.mapfile_dir
createmap_image_i.control.filename          =   make_image.mapfile

#
# Run PyBDSF to find sources
#
make_source_list.control.type                       = pythonplugin
make_source_list.control.executable                 = {{ scripts }}/make_source_list.py
make_source_list.control.error_tolerance            = {{ error_tolerance }}
make_source_list.control.mapfile_in                 = createmap_image_i.output.mapfile
make_source_list.control.inputkey                   = imagefile
make_source_list.control.outputkey                  = catalogfile
make_source_list.argument.flags                     = [imagefile,catalogfile]
make_source_list.argument.threshisl                 = 4.0
make_source_list.argument.threshpix                 = 5.0
make_source_list.argument.atrous_do                 = False
make_source_list.argument.rmsbox_bright             = (60,20)
make_source_list.argument.adaptive_rmsbox           = True
make_source_list.argument.atrous_jmax               = 4
make_source_list.argument.compare_dir               = {{ job_directory }}/results/inspection

#
# Finalize
#
createmap_images.control.kind                                    = plugin
createmap_images.control.type                                    = createMapfile
createmap_images.control.method                                  = mapfile_from_folder
createmap_images.control.mapfile_dir                             = input.output.mapfile_dir
createmap_images.control.filename                                = createmap_images.mapfile
createmap_images.control.folder                                  = {{ working_directory }}
createmap_images.control.pattern                                 = *restored*.fits

# Move the corrected datasets to the results folder.
make_results_mapfile_images.control.kind                         =   plugin
make_results_mapfile_images.control.type                         =   makeResultsMapfile
make_results_mapfile_images.control.mapfile_dir                  =   input.output.mapfile_dir
make_results_mapfile_images.control.filename                     =   make_results_mapfile_images.mapfile
make_results_mapfile_images.control.mapfile_in                   =   createmap_images.output.mapfile
make_results_mapfile_images.control.target_dir                   =   {{ results_directory }}
make_results_mapfile_images.control.make_target_dir              =   True

# Move the results to where we want them
move_results_images.control.kind                                 =   recipe
move_results_images.control.type                                 =   executable_args
move_results_images.control.executable                           =   /bin/mv
move_results_images.control.max_per_node                         =   {{ num_proc_per_node_limit }}
move_results_images.control.mapfiles_in                          =   [make_results_mapfile_images.output.mapfile,make_results_mapfile.output.mapfile]
move_results_images.control.inputkeys                            =   [source,destination]
move_results_images.control.arguments                            =   [source,destination]

# Move the corrected datasets to the results folder.
make_results_mapfile_catalog.control.kind                        =   plugin
make_results_mapfile_catalog.control.type                        =   makeResultsMapfile
make_results_mapfile_catalog.control.mapfile_dir                 =   input.output.mapfile_dir
make_results_mapfile_catalog.control.filename                    =   make_results_mapfile.mapfile
make_results_mapfile_catalog.control.mapfile_in                  =   make_source_list.output.mapfile
make_results_mapfile_catalog.control.target_dir                  =   {{ results_directory }}
make_results_mapfile_catalog.control.make_target_dir             =   False

# Move the results to where we want them
move_results_catalog.control.kind                                =   recipe
move_results_catalog.control.type                                =   executable_args
move_results_catalog.control.executable                          =   /bin/mv
move_results_catalog.control.max_per_node                        =   {{ num_proc_per_node_limit }}
move_results_catalog.control.mapfiles_in                         =   [make_results_mapfile_catalog.output.mapfile,make_results_mapfile.output.mapfile]
move_results_catalog.control.inputkeys                           =   [source,destination]
move_results_catalog.control.arguments                           =   [source,destination]
